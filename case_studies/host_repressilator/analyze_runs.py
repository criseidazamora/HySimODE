# =============================================================================
#  analyze_runs.py
# -----------------------------------------------------------------------------
#  Description:
#      Aggregates and summarizes results from multiple hybrid simulation runs
#      produced by HySimODE. Computes the per-species mean and standard
#      deviation across stochastic realizations and optionally generates plots.
#
#  Functionality:
#      - Reads all CSV output files (e.g., results_run*.csv) from a directory
#      - Verifies consistent time grids across runs
#      - Computes mean and standard deviation trajectories per species
#      - Saves summary statistics to 'species_summary.csv'
#      - Optionally generates mean ± 1 SD plots for each species
#
#  Usage:
#      python analyze_runs.py --dir output_hybrid/runs --plot
#
#  Output:
#      - summary/species_summary.csv
#      - summary/plots/*.png   (if --plot is used)
#
#  Notes:
#      - The script assumes that all result files share identical time vectors.
#      - Compatible with hybrid simulation outputs generated by hysimode.py.
#
#  © 2025 Criseida G. Zamora Chimal
# =============================================================================

import os
import argparse
import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def main():
    parser = argparse.ArgumentParser(description="Analyze multiple hybrid simulation runs.")
    parser.add_argument("--dir", type=str, default="output_hybrid/runs",
                        help="Directory containing results_run*.csv files.")
    parser.add_argument("--plot", action="store_true",
                        help="If set, generate average ± std plots per species.")
    args = parser.parse_args()

    # === Locate files ===
    files = sorted(glob.glob(os.path.join(args.dir, "results_run*.csv")))
    if not files:
        raise FileNotFoundError(f"No result files found in {args.dir}")

    print(f"[INFO] Found {len(files)} run files.")
    
    # === Load first file to get structure ===
    first_df = pd.read_csv(files[0])
    time = first_df["time"].values
    species = [c for c in first_df.columns if c != "time"]

    # === Stack all runs ===
    all_runs = np.zeros((len(files), len(time), len(species)))
    for i, fpath in enumerate(files):
        df = pd.read_csv(fpath)
        if not np.allclose(df["time"].values, time):
            raise ValueError(f"Time mismatch in {fpath}")
        all_runs[i, :, :] = df[species].values

    # === Compute mean and std ===
    mean_vals = np.mean(all_runs, axis=0)
    std_vals = np.std(all_runs, axis=0)

    # === Save summary ===
    summary_dir = os.path.join(args.dir, "../summary")
    os.makedirs(summary_dir, exist_ok=True)
    summary_file = os.path.join(summary_dir, "species_summary.csv")

    summary_df = pd.DataFrame(mean_vals, columns=[f"{s}_mean" for s in species])
    for j, s in enumerate(species):
        summary_df[f"{s}_std"] = std_vals[:, j]
    summary_df.insert(0, "time", time)
    summary_df.to_csv(summary_file, index=False)
    print(f"[INFO] Summary saved to {summary_file}")

    # === Optional plots ===
    if args.plot:
        plot_dir = os.path.join(summary_dir, "plots")
        os.makedirs(plot_dir, exist_ok=True)

        for j, s in enumerate(species):
            plt.figure(figsize=(5, 3), dpi=200)

            # Purple line represents the mean
            plt.plot(time, mean_vals[:, j],
                     color="#4B4E9A", linewidth=1.5,
                     label=f"{s} (mean)")

            # Gray shaded area represents ±1 standard deviation
            plt.fill_between(time,
                             mean_vals[:, j] - std_vals[:, j],
                             mean_vals[:, j] + std_vals[:, j],
                             color="gray", alpha=0.3,
                             label="±1 SD")

            # Labels
            plt.xlabel("Time (min)", fontsize=12)
            plt.ylabel("Molecules", fontsize=12)
            plt.title(s, fontsize=13)
            plt.legend(fontsize=10, frameon=False, loc="upper right")
            plt.grid(True, linestyle="--", alpha=0.4)

            plt.tight_layout()
            plt.savefig(os.path.join(plot_dir, f"{s}_avg_std.png"), dpi=200)
            plt.close()

        print(f"[INFO] Plots saved to {plot_dir}")

if __name__ == "__main__":
    main()
